<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Snake — Estilo Nokia (HTML/CSS/JS)</title>
  <style>
    :root{
      --bg:#0b1220;
      --panel:#dfe6ea;
      --screen:#bcd3d8;
      --snake:#0a6b0a;
      --snake-dark:#064a06;
      --food:#d62828;
      --muted:#9aa8af;
    }

    html,body{height:100%;}
    body{
      margin:0;
      display:flex;
      align-items:center;
      justify-content:center;
      background:linear-gradient(180deg,#061219 0%, #081726 100%);
      font-family:system-ui,Segoe UI,Roboto,"Helvetica Neue",Arial;
      color:var(--panel);
      -webkit-font-smoothing:antialiased;
    }

    .device{
      width:360px;
      max-width:94vw;
      background:linear-gradient(180deg,#f5f7f8 0%, #dbe6ea 100%);
      border-radius:14px;
      padding:16px;
      box-shadow:0 10px 30px rgba(2,6,23,0.6), inset 0 1px 0 rgba(255,255,255,0.6);
      display:grid;
      grid-template-rows: auto 1fr auto;
      gap:12px;
    }

    .title{
      display:flex;
      justify-content:space-between;
      align-items:center;
    }
    h1{font-size:14px;margin:0;color:#1b2b32;}
    .score{
      font-size:13px;color:var(--muted);
    }

    .screen-wrapper{
      background:linear-gradient(180deg,#9fc0c6 0%, #b9dbe0 100%);
      border-radius:6px;
      padding:10px;
      display:flex;
      justify-content:center;
      box-shadow:inset 0 2px 0 rgba(255,255,255,0.6);
    }

    canvas{
      background:repeating-linear-gradient(45deg, rgba(0,0,0,0.02) 0 1px, transparent 1px 24px), #8fb6bb;
      image-rendering:pixelated;
      border-radius:4px;
    }

    .controls{
      display:flex;
      justify-content:space-between;
      gap:8px;\      align-items:center;
    }

    .btn{
      background:#0e1720;
      color:var(--panel);
      border-radius:6px;
      padding:8px 10px;
      font-size:13px;
      cursor:pointer;
      border:0;
      box-shadow:0 2px 0 rgba(0,0,0,0.25);
    }

    .btn:active{transform:translateY(1px);}

    .small{font-size:12px;padding:6px 8px;border-radius:5px}

    .arrows{
      display:grid;
      grid-template-columns:repeat(3,40px);
      gap:6px;
      align-items:center;
      justify-content:center;
    }
    .arrow{
      width:40px;height:40px;border-radius:6px;display:flex;align-items:center;justify-content:center;background:#112028;color:#bfe6ea;user-select:none;cursor:pointer;font-weight:700
    }
    .arrow.empty{background:transparent}

    .meta{font-size:12px;color:var(--muted);text-align:center}

    footer{display:flex;justify-content:space-between;align-items:center}

    @media (max-width:420px){
      .device{width:320px;padding:12px}
      .arrows{grid-template-columns:repeat(3,34px)}
      .arrow{width:34px;height:34px}
    }
  </style>
</head>
<body>
  <div class="device" role="application" aria-label="Snake juego estilo Nokia">
    <div class="title">
      <h1>Snake — Nokia Classic</h1>
      <div class="score">Puntos: <span id="score">0</span></div>
    </div>

    <div class="screen-wrapper">
      <canvas id="game" width="320" height="320" style="touch-action: none"></canvas>
    </div>

    <div class="controls">
      <div style="display:flex;flex-direction:column;gap:6px">
        <div style="display:flex;gap:6px">
          <button class="btn small" id="startBtn">Iniciar</button>
          <button class="btn small" id="pauseBtn">Pausa</button>
          <button class="btn small" id="resetBtn">Reiniciar</button>
        </div>
        <div class="meta">Usa flechas o WASD. Toca las flechas para móvil.</div>
      </div>

      <div>
        <div class="arrows" id="touchControls">
          <div class="arrow empty"></div>
          <div class="arrow" data-dir="up">▲</div>
          <div class="arrow empty"></div>
          <div class="arrow" data-dir="left">◄</div>
          <div class="arrow empty">●</div>
          <div class="arrow" data-dir="right">►</div>
          <div class="arrow empty"></div>
          <div class="arrow" data-dir="down">▼</div>
          <div class="arrow empty"></div>
        </div>
      </div>
    </div>

    <footer>
      <div class="meta">Velocidad sube cada 5 manzanas</div>
      <div class="meta">Hecho con ❤️</div>
    </footer>
  </div>

  <script>
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const startBtn = document.getElementById('startBtn');
    const pauseBtn = document.getElementById('pauseBtn');
    const resetBtn = document.getElementById('resetBtn');

    // Configuración del tablero
    const TILE = 16; // tamaño en px de cada celda
    const COLS = canvas.width / TILE; // 320/16 = 20
    const ROWS = canvas.height / TILE;

    let snake;
    let dir;
    let nextDir;
    let food;
    let score = 0;
    let gameInterval = null;
    let speed = 140; // ms entre ticks (baja = más rápido)
    let running = false;

    function resetGame(){
      snake = [ {x:Math.floor(COLS/2), y:Math.floor(ROWS/2)}, {x:Math.floor(COLS/2)-1, y:Math.floor(ROWS/2)}, {x:Math.floor(COLS/2)-2, y:Math.floor(ROWS/2)} ];
      dir = {x:1,y:0};
      nextDir = dir;
      placeFood();
      score = 0;
      speed = 140;
      scoreEl.textContent = score;
      draw();
      stopLoop();
      running = false;
    }

    function placeFood(){
      let valid = false;
      while(!valid){
        food = { x: Math.floor(Math.random()*COLS), y: Math.floor(Math.random()*ROWS) };
        valid = !snake.some(s => s.x === food.x && s.y === food.y);
      }
    }

    function drawGrid(){
      // opcional: cuadrícula sutil
      ctx.clearRect(0,0,canvas.width,canvas.height);
    }

    function draw(){
      drawGrid();

      // fondo (screen)
      ctx.fillStyle = '#8fb6bb';
      ctx.fillRect(0,0,canvas.width,canvas.height);

      // comida
      ctx.fillStyle = '#d62828';
      roundRect(food.x*TILE+2, food.y*TILE+2, TILE-4, TILE-4, 3, true, false);

      // serpiente
      for(let i=0;i<snake.length;i++){
        const s = snake[i];
        ctx.fillStyle = i===0 ? '#064a06' : '#0a6b0a';
        roundRect(s.x*TILE+1, s.y*TILE+1, TILE-2, TILE-2, 3, true, false);
      }

      // borde pixel a lo nokia
      ctx.strokeStyle = 'rgba(0,0,0,0.12)';
      ctx.lineWidth = 1;
      ctx.strokeRect(0.5,0.5,canvas.width-1,canvas.height-1);
    }

    function roundRect(x, y, w, h, r, fill, stroke) {
      if (typeof stroke === 'undefined') stroke = true;
      if (typeof r === 'undefined') r = 5;
      ctx.beginPath();
      ctx.moveTo(x + r, y);
      ctx.arcTo(x + w, y, x + w, y + h, r);
      ctx.arcTo(x + w, y + h, x, y + h, r);
      ctx.arcTo(x, y + h, x, y, r);
      ctx.arcTo(x, y, x + w, y, r);
      ctx.closePath();
      if (fill) ctx.fill();
      if (stroke) ctx.stroke();
    }

    function step(){
      // aplicar dirección pendiente (evitar reversa inmediata)
      dir = nextDir;

      const head = { x: snake[0].x + dir.x, y: snake[0].y + dir.y };

      // colisión con paredes -> fin
      if(head.x < 0 || head.x >= COLS || head.y < 0 || head.y >= ROWS){
        gameOver();
        return;
      }

      // colisión con cuerpo
      if(snake.some(s => s.x === head.x && s.y === head.y)){
        gameOver();
        return;
      }

      snake.unshift(head);

      // comer comida?
      if(head.x === food.x && head.y === food.y){
        score += 1;
        scoreEl.textContent = score;
        placeFood();

        // aumentar velocidad cada 5 puntos
        if(score % 5 === 0 && speed > 50){
          speed = Math.max(50, speed - 12);
          restartLoop();
        }
      } else {
        snake.pop();
      }

      draw();
    }

    function startLoop(){
      if(gameInterval) return;
      gameInterval = setInterval(step, speed);
      running = true;
    }
    function stopLoop(){
      if(gameInterval) clearInterval(gameInterval);
      gameInterval = null;
      running = false;
    }
    function restartLoop(){
      stopLoop();
      startLoop();
    }

    function gameOver(){
      stopLoop();
      running = false;
      // efecto simple: parpadeo y reiniciar estado de botones
      flashGameOver();
    }

    function flashGameOver(){
      const prev = ctx.getImageData(0,0,canvas.width,canvas.height);
      let flashes = 0;
      const t = setInterval(()=>{
        ctx.fillStyle = (flashes%2===0) ? 'rgba(214,50,50,0.18)' : '#8fb6bb';
        ctx.fillRect(0,0,canvas.width,canvas.height);
        flashes++;
        if(flashes>5){
          clearInterval(t);
          ctx.putImageData(prev,0,0);
          alert('Juego terminado. Puntuación: ' + score);
        }
      },120);
    }

    // input keyboard
    window.addEventListener('keydown', e=>{
      const k = e.key;
      if(k === 'ArrowUp' || k === 'w' || k==='W') setDir(0,-1);
      if(k === 'ArrowDown' || k === 's' || k==='S') setDir(0,1);
      if(k === 'ArrowLeft' || k === 'a' || k==='A') setDir(-1,0);
      if(k === 'ArrowRight' || k === 'd' || k==='D') setDir(1,0);
      if(k === ' '){ // espacio pausa
        if(running) stopLoop(); else startLoop();
      }
    });

    function setDir(x,y){
      // no permitir reversa inmediata
      if(dir.x === -x && dir.y === -y) return;
      nextDir = {x,y};
      // si no estaba corriendo, iniciar
      if(!running) startLoop();
    }

    // touch controls
    document.getElementById('touchControls').addEventListener('click', e=>{
      const d = e.target.getAttribute('data-dir');
      if(!d) return;
      if(d === 'up') setDir(0,-1);
      if(d === 'down') setDir(0,1);
      if(d === 'left') setDir(-1,0);
      if(d === 'right') setDir(1,0);
    });

    // botones
    startBtn.addEventListener('click', ()=>{ if(!running) startLoop(); });
    pauseBtn.addEventListener('click', ()=>{ if(running) stopLoop(); else startLoop(); });
    resetBtn.addEventListener('click', ()=>{ resetGame(); });

    // soporte para arrastrar en móvil (gestos)
    let touchStart = null;
    canvas.addEventListener('touchstart', e=>{
      const t = e.touches[0];
      touchStart = {x:t.clientX, y:t.clientY};
      e.preventDefault();
    },{passive:false});
    canvas.addEventListener('touchend', e=>{
      if(!touchStart) return;
      const t = e.changedTouches[0];
      const dx = t.clientX - touchStart.x;
      const dy = t.clientY - touchStart.y;
      if(Math.abs(dx) > Math.abs(dy)){
        if(dx>20) setDir(1,0); else if(dx<-20) setDir(-1,0);
      } else {
        if(dy>20) setDir(0,1); else if(dy<-20) setDir(0,-1);
      }
      touchStart = null;
    });

    // iniciamos
    resetGame();
  </script>
</body>
</html>
